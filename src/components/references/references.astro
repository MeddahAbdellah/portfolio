---
import references from "../../../public/references.json";
import { Button } from "../ui/button";
import { ReferenceColumn } from "./reference-column";

const referenceColumns = [
  references.filter((_, index) => index % 3 === 0),
  references.filter((_, index) => index % 3 === 1),
  references.filter((_, index) => index % 3 === 2),
];
---

<section
  id="refs"
  class="hidden md:flex flex-col snap-start snap-always py-8 px-16 h-full"
>
  <header>
    <h2 class="text-3xl font-bold mb-4">References</h2>
    <div class="flex justify-between">
      <h3 class="text-sm text-zinc-400 ml-2 mb-8">
        üôè Thank you all for the feedbacks
      </h3>
      <Button aria-label="Show reviews" variant="secondary">
        <a href="#deployments" id="deployments-scroll-link">Add a review</a>
      </Button>
    </div>
  </header>

  <main
    id="references-scroll-container"
    class="h-full overflow-y-auto gap-4 grid grid-cols-3"
  >
    {
      referenceColumns.map((column) => {
        return <ReferenceColumn referenceColumn={column} />;
      })
    }
  </main>
</section>
<script type="module">
  const container = document.getElementById("references-scroll-container");
  const referenceCards = document.querySelectorAll(".referenceCard");
  const limit = 150;
  const checkDistanceAndAdjustOpacity = () => {
    referenceCards.forEach((card) => {
      const cardBottom = card.getBoundingClientRect().bottom;
      const containerTop = container.getBoundingClientRect().top;
      const distance = cardBottom - containerTop;

      if (distance < limit) {
        card.style.opacity = "0";
      }

      if (distance > limit) {
        card.style.opacity = "1";
      }
    });
  };

  container.addEventListener("scroll", checkDistanceAndAdjustOpacity);

  let scrollInterval;

  const startScroll = () => {
    scrollInterval = setInterval(() => {
      container.scrollTop += 1;
    }, 25);
  };

  container.addEventListener("mouseenter", () => {
    clearInterval(scrollInterval);
  });

  container.addEventListener("mouseleave", () => {
    startScroll();
  });

  document
    .getElementById("deployments-scroll-link")
    .addEventListener("click", (event) => {
      // The only way I found to scroll to the element is by using the offsetTop
      const main = document.querySelector("#app-root-main");
      const element = document.querySelector("#deployments");
      main.scrollTop = element.offsetTop - main.offsetTop;
    });
</script>
